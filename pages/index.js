import { useRef, useEffect } from 'react'
import Head from 'next/head'
import { useIsomorphicLayoutEffect } from '../helper/useIsomorphicLayoutEffect'

import gsap from 'gsap'

const listBg = ['bg-slate-400', 'bg-slate-600', 'bg-slate-800']

export default function Home() {
   const containerRef = useRef()
   const selector = gsap.utils.selector(containerRef)

   //two ways of making animation

   // 1. this function will return useLayoutEffect on browser (if window is defined)
   //    or return useEffect on SSR.
   useIsomorphicLayoutEffect(() => {
      // const elHeight = 80
      // gsap.set(containerRef.current, { opacity: 1 })
      // gsap.set(selector('div'), { y: (i) => i * elHeight })
      // const textListEl = gsap.utils.toArray(selector('div'))
      // const maxHeightWrapper = textListEl.length * elHeight - elHeight
      // let trackPositionIdx = Array.from(Array(textListEl.length).keys())
      // const anim = () => {
      //    textListEl.forEach((item, idx) => {
      //       let currY = trackPositionIdx[idx] * elHeight
      //       trackPositionIdx[idx]++
      //       if (currY >= maxHeightWrapper) {
      //          currY = -elHeight
      //          gsap.set(item, { y: currY })
      //          trackPositionIdx[idx] = 0
      //       }
      //       console.log(trackPositionIdx)
      //       const yHeight = currY + elHeight
      //       gsap.to(item, {
      //          y: yHeight,
      //          duration: 0.5,
      //          ease: 'Expo.easeInOut',
      //       })
      //    })
      // }
      // const loop = setInterval(anim, 2000)
      // // gsap.delayedCall(3, anim)
      // return () => {
      //    clearInterval(loop)
      // }
   }, [])

   // 2. using this because useLayoutEffect had problem with gsap modifiers,
   //    it will add increment value overtime
   useEffect(() => {
      gsap.set(containerRef.current, { opacity: 1 })

      const offset = -100
      const max = -(selector('div').length - 1) * offset
      const elList = gsap.utils.toArray(selector('div'))

      gsap.set(elList, {
         yPercent: (i) => i * offset,
      })

      const anim = () => {
         gsap.to(elList, {
            ease: 'back.inOut',
            yPercent: '-=' + offset,
            duration: 0.75,
            modifiers: {
               yPercent: (yPercent) => gsap.utils.wrap(offset, max, yPercent),
            },
            onComplete: () => delayedCall.restart(true),
         })
      }

      const delayedCall = gsap.delayedCall(1.2, anim)
   }, [])

   return (
      <div>
         <Head>
            <title>Next App</title>
            <meta name="description" content="Generated by create next app" />
            <link rel="icon" href="/favicon.ico" />
         </Head>

         <div className="h-screen w-screen grid place-items-center">
            <div className="h-20 w-40 relative opacity-0 overflow-hidden" ref={containerRef}>
               {['hello', 'world', 'welcome!'].map((item, idx) => (
                  <div
                     className={`text-white font-semibold h-20 w-full grid place-items-center ${listBg[idx]} uppercase absolute will-change-auto`}
                     key={`text-${idx}`}
                  >
                     <p>{item}</p>
                  </div>
               ))}
            </div>
         </div>
      </div>
   )
}
